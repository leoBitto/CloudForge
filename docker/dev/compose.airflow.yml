x-airflow-common:
  &airflow-common
  build:
    context: ../../
    dockerfile: src/airflow/Dockerfile
  env_file:
    - ../../src/airflow/config/.env
  volumes:
    - ../../src/airflow/dags:/opt/airflow/dags
    - ../../src/airflow/plugins:/opt/airflow/plugins
    - ../../src/airflow/logs:/opt/airflow/logs
    - ../../src/airflow/scripts:/scripts
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy

services:

  postgres:
    container_name: cf-airflow-metadata
    image: postgres:15
    env_file:
      - ../../src/airflow/config/airflow-db.conf
    volumes:
      - airflow_metadata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
      start_period: 10s
      timeout: 5s

  redis:
    container_name: cf-redis
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |

        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /opts/airflow/{logs,dags,plugins,config}
        chown -R "${AIRFLOW_UID}:0" /opts/airflow/{logs,dags,plugins,config}
        exec /entrypoint airflow version
    environment:
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"


#  airflow-init:
#    container_name: cf-init
#    <<: *airflow-common
#    command: >
#      bash /scripts/server-checks.sh
#    restart: "no"   
#    depends_on:
#      postgres:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#
#  airflow-db-migrate:
#    container_name: cf-db-migrate
#    <<: *airflow-common
#    command: >
#      bash -c "/entrypoint airflow version"
#    environment:
#      _AIRFLOW_DB_MIGRATE: 'true'
#    restart: "no"   
#    depends_on:
#      airflow-init:
#        condition: service_completed_successfully
#      
#  airflow-create_users:
#    container_name: cf-create-users
#    <<: *airflow-common
#    command: >
#      bash -c "echo USERNAME=\$$_AIRFLOW_WWW_USER_USERNAME && echo PASSWORD=\$$_AIRFLOW_WWW_USER_PASSWORD && /entrypoint airflow version"
#    environment:
#      - _AIRFLOW_WWW_USER_CREATE=true
#      - _AIRFLOW_WWW_USER_USERNAME=${AIRFLOW_WWW_USER_USERNAME}
#      - _AIRFLOW_WWW_USER_PASSWORD=${AIRFLOW_WWW_USER_PASSWORD}
#    restart: "no"
#    depends_on:
#      airflow-db-migrate:
#        condition: service_completed_successfully

  airflow-worker:
    container_name: cf-worker
    <<: *airflow-common
    command: >
      bash -c "/entrypoint celery worker"
    environment:
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-api:
    container_name: cf-api
    <<: *airflow-common
    command: >
      bash -c "/entrypoint airflow api-server"
    ports:
      - 8080:8080
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    container_name: cf-scheduler
    <<: *airflow-common
    command: >
      bash -c "/entrypoint airflow scheduler"
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-dag-processor:
    container_name: cf-dag-processor
    <<: *airflow-common
    command: >
      bash -c "/entrypoint airflow dag-processor"
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-flower:
    container_name: cf-flower
    <<: *airflow-common
    command: >
      bash -c "/entrypoint airflow celery flower"
    ports:
      - 5555:5555
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always


#  airflow-db-create-connection:
#    container_name: cf-init-conn
#    <<: *airflow-common
#    command: >
#      bash -c "
#        airflow connections delete postgres_gold || true &&
#        airflow connections add postgres_gold \
#          --conn-uri \"postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${GOLD_SQL_HOST}:${SQL_PORT}/${POSTGRES_DB}\"
#      "
#    env_file:
#      - ../../src/db/config/gold.conf
#    depends_on:
#      postgres:
#        condition: service_healthy
#      postgres-gold:
#        condition: service_healthy
#      airflow-db-migrate:
#        condition: service_completed_successfully

volumes:
  airflow_metadata:
