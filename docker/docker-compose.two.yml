services:
  # Django app
  django-app:
    build:
      context: ../
      dockerfile: ./docker/django/Dockerfile
    image: django-app
    restart: always
    command: gunicorn base.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    expose:
      - 8000
    env_file:
      - ../config/django.conf
    depends_on:
      postgres-silver:
        condition: service_healthy
      postgres-gold:
        condition: service_healthy
    networks:
      - app_network

  # Postgres silver database
  postgres-silver:
    image: postgres:15
    volumes:
      - postgres_data_silver:/var/lib/postgresql/data/
    env_file:
      - ../config/silver.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Postgres gold database
  postgres-gold:
    image: postgres:15
    volumes:
      - postgres_data_gold:/var/lib/postgresql/data/
    env_file:
      - ../config/gold.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # service to make migration and create superuser, it start then stop
  django-init:
    build:
      context: ../
      dockerfile: ./docker/django/Dockerfile
    depends_on:
      postgres-silver:
        condition: service_healthy
      postgres-gold:
        condition: service_healthy
    env_file:
      - ../config/django.conf
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    command: >
      bash -c "
      env &&
      python manage.py makemigrations --noinput &&
      python manage.py migrate --noinput &&
      python manage.py migrate --noinput --database=gold &&
      python manage.py collectstatic --noinput --clear &&
      python create_superuser.py
      "
    networks:
      - app_network





  # Nginx reverse proxy
  nginx-proxy:
    image: nginx:latest
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
      - ../nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    restart: always
    depends_on:
      - django-app
    networks:
      - app_network

volumes:
  postgres_data_silver:
  postgres_data_gold:
  static_volume:
  media_volume:

networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24
