services:
  # Django app
  django-app:
    build:
      context: ../
      dockerfile: ./docker/django/Dockerfile
    image: django-app
    restart: always
    command: gunicorn base.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    expose:
      - 8000
    env_file:
      - ../config/django.conf
    depends_on:
      postgres-bronze:
        condition: service_healthy
      postgres-silver:
        condition: service_healthy
      postgres-gold:
        condition: service_healthy
    networks:
      - app_network

  # Postgres bronze database
  postgres-bronze:
    image: postgres:15
    volumes:
      - postgres_data_bronze:/var/lib/postgresql/data/
    env_file:
      - ../config/bronze.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Postgres silver database
  postgres-silver:
    image: postgres:15
    volumes:
      - postgres_data_silver:/var/lib/postgresql/data/
    env_file:
      - ../config/silver.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Postgres gold database
  postgres-gold:
    image: postgres:15
    volumes:
      - postgres_data_gold:/var/lib/postgresql/data/
    env_file:
      - ../config/gold.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # service to make migration and create superuser, it start then stop
  django-init:
    build:
      context: ../
      dockerfile: ./docker/django/Dockerfile
    depends_on:
      postgres-silver:
        condition: service_healthy
      postgres-gold:
        condition: service_healthy
    env_file:
      - ../config/django.conf
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    command: >
      bash -c "
      python manage.py makemigrations --noinput &&
      python manage.py migrate --noinput &&
      python manage.py migrate --noinput --database=silver &&
      python manage.py migrate --noinput --database=gold &&
      python manage.py collectstatic --noinput --clear &&
      python create_superuser.py
      "
    networks:
      - app_network

  airflow-db:
    image: postgres:13
    env_file:
      - ../config/airflow-db.conf
    volumes:
      - airflow_metadata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - app_network

  airflow-webserver:
    image: apache/airflow:2.10.3
    env_file:
      - ../config/airflow-db.conf
      - ../config/airflow.conf
    volumes:
      - ../src/airflow/dags:/opt/airflow/dags
      - ../src/airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    expose:
      - 8080
    command: bash -c  "airflow webserver"
    depends_on:
      - airflow-db
      - airflow-init
    restart: always
    networks:
      - app_network

  airflow-scheduler:
    image: apache/airflow:2.10.3
    env_file:
      - ../config/airflow-db.conf
      - ../config/airflow.conf
    volumes:
      - ../src/airflow/dags:/opt/airflow/dags
      - ../src/airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    command: bash -c "airflow scheduler"
    depends_on:
      - airflow-db
      - airflow-init
    restart: always
    networks:
      - app_network

  airflow-init:
    image: apache/airflow:2.10.3
    env_file:
      - ../config/airflow-db.conf
      - ../config/airflow.conf
    volumes:
      - ../src/airflow/dags:/opt/airflow/dags
      - ../src/airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      bash -c " airflow db init &&
                airflow db migrate &&
                airflow users create \\
                 --username $$ADMIN_USERNAME \\
                 --password $$ADMIN_PASSWORD \\
                 --firstname $$ADMIN_FIRSTNAME \\
                 --lastname $$ADMIN_LASTNAME \\
                 --role Admin \\
                 --email $$ADMIN_MAIL"
    depends_on:
      - airflow-db
    networks:
      - app_network


  streamlit-app:
    build:
      context: ../
      dockerfile: ./docker/streamlit/Dockerfile
    volumes:
      - ../src/streamlit:/app
    depends_on:
      postgres-gold:
        condition: service_healthy
      django-app:
        condition: service_started
    env_file:
      - ../config/gold.conf
      - ../config/streamlit.conf  
    expose:
      - 8501  
    restart: always
    command: streamlit run /app/app.py
    networks:
      - app_network


  # Nginx reverse proxy
  nginx-proxy:
    image: nginx:latest
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
      - ../nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    restart: always
    depends_on:
      - django-app
      - airflow-webserver 
      - streamlit-app
    networks:
      - app_network


  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ../config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: always
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_network


  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
      - ../config/grafana/datasource.json:/etc/grafana/provisioning/datasources/datasource.json
      - ../config/grafana/grafana.ini:/etc/grafana/grafana.ini
    env_file:
      - ../config/grafana/grafana.ini
    expose:
      - "3000:3000"
    restart: always
    depends_on:
      - prometheus
    networks:
      - app_network




volumes:
  postgres_data_bronze:
  postgres_data_silver:
  postgres_data_gold:
  airflow_metadata:
  static_volume:
  media_volume:
  prometheus_data:
  grafana_data:

networks:
  app_network:
    driver: bridge

