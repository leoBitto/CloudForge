name: CD

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: SCP Docker Compose file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "./docker/prod/docker-compose.prod.yml"
          target: "/opt/"
  
      - name: Verify Docker Compose file
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo apt install tree -y
            cd /opt/
            tree . -I 'venv|__pycache__|static|media'

      - name: Docker system prune except volumes
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |      
            docker rm -f $(docker ps -aq) 
            docker rmi -f $(docker images -aq) 
            docker network prune -f


      - name: Start application
        run: |
          # Comandi per il deploy dell'applicazione
          echo "Deploying application..."

      - name: SCP Nginx configuration
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "nginx/nginx.conf"
          target: "/etc/nginx/sites-available/"
          strip_components: 1
  
      - name: Update Nginx configuration
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            
            rm -f /etc/nginx/sites-enabled/nginx.conf
            rm -f /etc/nginx/sites-enabled/nginx.dev.conf
            rm -f /etc/nginx/sites-enabled/default
            ln -s /etc/nginx/sites-available/nginx.conf /etc/nginx/sites-enabled/nginx.conf

            sed -i "s/localhost/${{ secrets.DOMAIN }}/g" /etc/nginx/sites-available/nginx.conf
            ln -s /etc/nginx/sites-available/nginx.conf /etc/nginx/sites-enabled
            if nginx -t; then
              sudo systemctl restart nginx
            else
              echo "Nginx configuration test failed. Deployment aborted."
              exit 1
            fi

      - name: Setup Certbot for SSL
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            # Converte la stringa di domini in array e costruisce i parametri per certbot
            DOMAINS="${{ secrets.DOMAIN }}"
            DOMAIN_PARAMS=""
            for domain in $DOMAINS; do
              DOMAIN_PARAMS="$DOMAIN_PARAMS --domains $domain"
            done
            
            # Prendi il primo dominio come dominio principale
            PRIMARY_DOMAIN=$(echo $DOMAINS | cut -d' ' -f1)
            
            # Rimuovi certificato esistente
            sudo rm -rf /etc/letsencrypt/live/$PRIMARY_DOMAIN*
            sudo rm -rf /etc/letsencrypt/archive/$PRIMARY_DOMAIN*
            sudo rm -rf /etc/letsencrypt/renewal/$PRIMARY_DOMAIN*
            
            # Installazione Certbot se non presente
            if ! command -v certbot &> /dev/null; then
              sudo apt-get update
              sudo apt-get remove certbot -y
              sudo snap install --classic certbot
              sudo ln -sf /snap/bin/certbot /usr/bin/certbot
            fi
            
            # Verifica che Nginx sia in ascolto sulla porta 80
            sudo systemctl stop nginx
            sudo systemctl start nginx
            
            # Ottieni nuovo certificato
            sudo certbot --nginx \
              --non-interactive \
              --agree-tos \
              --email ${{ secrets.EMAIL }} \
              $DOMAIN_PARAMS \
              --keep-until-expiring \
              --redirect
            
            # Verifica la configurazione di Nginx
            sudo nginx -t && sudo systemctl restart nginx